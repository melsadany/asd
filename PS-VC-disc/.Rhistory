tmp$unique_identifier[match(gsub("\\-", ".", rownames(combined.brain.integrated.mt_filtered.500.res0.6@meta.data)), tmp$unique_identifier), ] %>% head()
mmd = combined.brain.integrated.mt_filtered.500.res0.6@meta.data
emd = tmp
head(mmd)
head(emd)
emd$mmd_id = match(rownames(emd), gsub("\\-", ".", rownames(mmd)))
head(emd)
emd$mmd_id = rownames(mmd)[match(rownames(emd), gsub("\\-", ".", rownames(mmd)))]
head(emd)
mmd$ecl1 = emd[match(rownames(mmd), emd$mmd_id), "integrated_snn_res.1"]
head(mmd)
dim(mmd)
dim(combined.brain.integrated.mt_filtered.500.res0.6)
combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1 = mmd$ecl1
SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1")
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"))
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "ecl1"))
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample12", group.by = "ecl1"))
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample15", group.by = "ecl1"))
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "ecl1"))
View(combined.brain.integrated.mt_filtered.500.res0.6)
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample16"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample15"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample14"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample13"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample12"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data %>% filter(orig.ident == "Sample09"))
head(combined.brain.integrated.mt_filtered.500.res0.6@meta.data)
head(emd)
head(emd %>% filter(orig.ident == "Sample16"))
mmd["AAACAAGTATCTCCCA-1_8",]
combined.brain.integrated.mt_filtered.500.res0.6@meta.data["AAACAAGTATCTCCCA-1_8",]
class(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1)
class(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$integrated_snn_res.1)
combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1 = factor(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1)
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "ecl1"))
levels(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1)
table(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1 == NA)
table(is.na(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1 )
table(is.na(combined.brain.integrated.mt_filtered.500.res0.6@meta.data$ecl1 ))
?FindClusters
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", information = "ecl1"))
cb.2 <- combined.brain.integrated.mt_filtered.500.res0.6
Idents(cb.2) <- "ecl1"
cowplot::plot_grid(SpatialDimPlot(combined.brain.integrated.mt_filtered.500.res0.6, images = "Sample16", group.by = "integrated_snn_res.1"),SpatialDimPlot(cb.2, images = "Sample16"))
View(cb.2)
Idents(cb.2)
SpatialDimPlot(cb.2)
SpatialDimPlot(cb.2, images = "Sample16")
SpatialDimPlot(cb.2, images = "Sample16",group.by = "ecl1")
SpatialDimPlot(cb.2, images = "Sample16",group.by = "ecl1", cells.highlight = "ecl1")
SpatialDimPlot(cb.2, images = "Sample16",group.by = "ecl1", label = T)
Idents(cb.2) <- "Seurat_clusters"
SpatialDimPlot(cb.2, images = "Sample16",group.by = "ecl1", label = T)
SpatialDimPlot(cb.2, images = "Sample16", label = T)
Idents(cb.2) <- "seurat_clusters"
SpatialDimPlot(cb.2, images = "Sample16", label = T)
Idents(cb.2) <- "ecl1"
SpatialDimPlot(cb.2, images = "Sample16", label = T)
SpatialDimPlot(cb.2, images = "Sample16")
?SpatialDimPlot
Idents(cb.2) <- "seurat_clusters"
SpatialDimPlot(cb.2, images = "Sample16")
SpatialDimPlot(cb.2, images = "Sample16", group.by = "ecl1")
levels(cb.2@active.ident)
Idents(cb.2) <- "ecl1"
levels(cb.2@active.ident)
cb.2@active.ident["NA",]
cb.2@active.ident["NA"]
cb.2@active.ident[1]
is.na(cb.2@active.ident)
table(is.na(cb.2@active.ident))
if (cb.2@active.ident == NA) {}
if (cb.2@active.ident == NA) {}
File_path <- "/wdata/msmuhammad/projects/Allen/human_brain"
load("/wdata/msmuhammad/projects/Allen/human_brain/R_Imaging/sub-2001_reg-ANTs.RData")
load("/wdata/msmuhammad/projects/Allen/human_brain/R_Imaging/sub-2001_reg-ANTs.RData")
load("/wdata/msmuhammad/projects/Allen/human_brain/R_Imaging/sub-2001_reg-ANTs.RData")
library(ANTsR)
library(ANTsRCore)
packages.list <- c("ANTsR", "oro.nifti", "neurobase")
lapply(packages.list, library, character.only = TRUE)
project.dir <- "/wdata/msmuhammad/projects/Allen/human_brain/"
output.dir <- paste0(project.dir, "R_Imaging/02_Image-Processing/")
setwd(output.dir)
subjects <- c("H0351-1009", "H0351-1012", "H0351-1015", "H0351-1016", "H0351-2001", "H0351-2002", "H0351-2003", "H372-0006")
mod <- c("T1", "T2")
files_paths <- vector(length = length(subjects)*length(mod))
f <- 1
for (i in 1:length(subjects)) {
for (j in 1:length(mod)) {
tmp <- paste0(output.dir, "rawdata/sub-", subjects[i], "/sub-",subjects[i], "_",mod[j], ".nii.gz")
files_paths[f] <- tmp
f <- f+1
}
}
metadata <- data.frame(files_paths)
metadata$mod <- rep(c("T1", "T2"), 8)
metadata$PID <- rep(subjects, each = 2)
metadata
load("/wdata/jmichaelson/BrainSpan/Allen_singlenuc/bulk_brain/colin_ref_brain_mni.Rdata")
i <- 1
subject <- metadata$PID[i]
t1.img <- readNIfTI2(metadata[i, "files_paths"])
t1.denoised <- denoiseImage(t1.img)
t1.denoised <- denoiseImage(t1.img)
t1.img <- readNIfTI(metadata[i, "files_paths"])
t1.denoised <- denoiseImage(t1.img)
t1.img <- antsImageRead(metadata[i, "files_paths"])
t1.denoised <- denoiseImage(t1.img)
write_nifti(t1.denoised, paste0(output.dir,
"derivatives/sub-", subject, "_denoised.nii.gz"))
?denoiseImage
as.nifti(t1.denoised)
write_nifti(as.nifti(t1.denoised), paste0(output.dir,
"derivatives/sub-", subject, "_denoised.nii.gz"))
subject <- metadata$PID[i]
t1.img <- antsImageRead(metadata[i, "files_paths"])
i <- 15
subject <- metadata$PID[i]
t1.img <- antsImageRead(metadata[i, "files_paths"])
t1.denoised <- denoiseImage(t1.img)
write_nifti(t1.denoised, paste0(output.dir,
"derivatives/sub-", subject, "_denoised.nii.gz"))
t1.debiased <- bias_correct_ants(t1.denoised, correction = "N4")
packages.list <- c("ANTsR", "oro.nifti", "neurobase", "extrantsr")
lapply(packages.list, library, character.only = TRUE)
t1.debiased <- bias_correct_ants(t1.denoised, correction = "N4")
write_nifti(t1.debiased, paste0(output.dir,
"derivatives/sub-", subject, "_debiased-N4.nii.gz"))
t1.reg.out <- antsRegistration(fixed = colin, moving = t1.debiased, typeofTransform = c("SyN"))
colin <- antsImageRead(paste0(project.dir, "Colin_brain_atlas.nii.gz"))
t1.reg.out <- antsRegistration(fixed = colin, moving = t1.debiased, typeofTransform = c("SyN"))
t1.reg.result <- iMath(t1.reg.out$warpedmovout, "Normalize")
fixed.edge <- iMath(colin, "Canny", 1,5,12)
invisible(plot(t1.reg.result, list(fixed.edge), window.overlay = c(0.5,1)))
svg(invisible(plot(t1.reg.result, list(fixed.edge), window.overlay = c(0.5,1))), filename = paste0(output.dir, "derivatives/sub-", subject, "_reg-ANTs.svg"))
svg(filename = paste0(output.dir, "derivatives/sub-", subject, "_reg-ANTs.svg"))
invisible(plot(t1.reg.result, list(fixed.edge), window.overlay = c(0.5,1)))
dev.off()
write_nifti(t1.reg.result, filename = paste0(output.dir,
"derivatives/sub-", subject, "_reg-ANTs.nii.gz"))
packages.list <- c("ANTsR", "oro.nifti", "neurobase", "extrantsr")
lapply(packages.list, library, character.only = TRUE)
project.dir <- "/wdata/msmuhammad/projects/Allen/human_brain/"
output.dir <- paste0(project.dir, "R_Imaging/02_Image-Processing/")
setwd(output.dir)
subjects <- c("H0351-1009", "H0351-1012", "H0351-1015", "H0351-1016", "H0351-2001", "H0351-2002", "H0351-2003", "H372-0006")
mod <- c("T1", "T2")
files_paths <- vector(length = length(subjects)*length(mod))
f <- 1
for (i in 1:length(subjects)) {
for (j in 1:length(mod)) {
tmp <- paste0(output.dir, "rawdata/sub-", subjects[i], "/sub-",subjects[i], "_",mod[j], ".nii.gz")
files_paths[f] <- tmp
f <- f+1
}
}
metadata <- data.frame(files_paths)
metadata$mod <- rep(c("T1", "T2"), 8)
metadata$PID <- rep(subjects, each = 2)
metadata
colin <- antsImageRead(paste0(project.dir, "Colin_brain_atlas.nii.gz"))
# For some reason, the wirte_nifti function doesn't like overwriting an already existing file
# So, make sure that the derivatives folder is empty before running the for loop
for (i in seq(1,length(rownames(metadata)), by = 2)) {
subject <- metadata$PID[i]
t1.img <- antsImageRead(metadata[i, "files_paths"])
t1.denoised <- denoiseImage(t1.img)
write_nifti(t1.denoised, paste0(output.dir,
"derivatives/sub-", subject, "_denoised.nii.gz"))
t1.debiased <- bias_correct_ants(t1.denoised, correction = "N4")
write_nifti(t1.debiased, paste0(output.dir,
"derivatives/sub-", subject, "_debiased-N4.nii.gz"))
t1.reg.out <- antsRegistration(fixed = colin, moving = t1.debiased, typeofTransform = c("SyN"))
t1.reg.result <- iMath(t1.reg.out$warpedmovout, "Normalize")
fixed.edge <- iMath(colin, "Canny", 1,5,12)
svg(filename = paste0(output.dir, "derivatives/sub-", subject, "_reg-ANTs.svg"))
invisible(plot(t1.reg.result, list(fixed.edge), window.overlay = c(0.5,1)))
dev.off()
write_nifti(t1.reg.result, filename = paste0(output.dir,
"derivatives/sub-", subject, "_reg-ANTs.nii.gz"))
}
tissue <- "Brain_Hypothalamus"
library(tidyverse)
library(tidyverse)
install.packages("readr")
library(tidyverse)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
library(BSgenome.Hsapiens.UCSC.hg19)
genotypes.file <- read.table(file = "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/genotypes/EA4_02.xmat", header = TRUE, check.names = FALSE)
# genotypes.file <- read.table(file = "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/genotypes/EA4_02.xmat", header = TRUE, check.names = FALSE)
genotypes.file <- genotypes.file[2:nrow(genotypes.file),]
tissue.output.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/job-pipeline-output-01/Brain_Hypothalamus"
# define directoties
weights.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/UTMOST-GTEx-model-weights/"
# pull tissue weights
tissue.weights <- read.csv(file = paste0(weights.dir, tissue, ".db.csv"), header = TRUE, row.names = 1)
# I found out that some weights files have duplicated rows of same rsid and weights, so I had to remove one of these duplicates
tissue.weights <- unique(tissue.weights)
#####
# rsid annotation section
tmp.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/UTMOST-GTEx-model-weights/tmp"
# step 1
tmp.rsid.filename <- paste0(tmp.dir, "/rsid-for-", tissue)
gpos <- snpsById(SNPlocs.Hsapiens.dbSNP144.GRCh37, tissue.weights$rsid, ifnotfound = "drop")
seqlevelsStyle(gpos) <- "UCSC"
z <- inferRefAndAltAlleles(gpos, BSgenome.Hsapiens.UCSC.hg19)
mcols(gpos) <- cbind(mcols(gpos), z)
rsid.info <- as.data.frame(gpos)
rsid.info$alt_alleles <- substr(rsid.info$alt_alleles, 0, 1)
rsid.info <- rsid.info %>%
mutate(ID_02 = paste0(seqnames, ":", pos, ":", ref_allele, ":", alt_alleles))
colnames(rsid.info)[4] <- "rsid"
tissue.rsid.info <- unique(rsid.info[,c(4,9)])
tissue.rsid.info.filt <- merge(tissue.rsid.info, tissue.weights, by = "rsid")
tissue.rsid.info.filt <- unique(tissue.rsid.info.filt)
write.table(tissue.rsid.info.filt, file = tmp.rsid.filename)
writeLines(tissue.rsid.info.filt$ID_02, "/wdata/msmuhammad/projects/tx-imputation/EA4_01_colnames")
writeLines(tissue.rsid.info.filt$ID_02, "/wdata/msmuhammad/projects/tx-imputation/Brain_Hypothalamus_ID02")
View(tissue.rsid.info.filt)
gene = "ABCB10"
gene.weights <- unique(tissue.rsid.info.filt[which(tissue.rsid.info.filt$gene == gene),])
View(gene.weights)
# print("head of gene weights")
# print(head(gene.weights))
gene.weights.matrix <- as.matrix(gene.weights$weight)
rownames(gene.weights.matrix) <- gene.weights$ID_02
genotypes.file.matrix <- as.matrix(genotypes.file[,3:ncol(genotypes.file)])
rownames(genotypes.file.matrix) <- genotypes.file$IID
(any(is.element(rownames(gene.weights.matrix), colnames(genotypes.file.matrix))))
dim(genotypes.file.matrix)
imputed.tissue.tx <- data.frame(row.names = genotypes.file$IID)
imputed.tx <- matrix(0, ncol = 1, nrow = nrow(genotypes.file.matrix))
rownames(imputed.tx) <- genotypes.file$IID
colnames(imputed.tx) <- gene
# save gene output
imputed.tx.fname <- paste0(tissue.output.dir, "/imputed_expression_per_gene/imputed-tx-of-", gene)
imputed.tissue.tx <- cbind(imputed.tissue.tx, imputed.tx)
View(imputed.tissue.tx)
gene = "genes.list[2]
gene = genes.list[2]
genes.list <- unique(tissue.weights$gene)
gene = genes.list[2]
gene.weights <- unique(tissue.rsid.info.filt[which(tissue.rsid.info.filt$gene == gene),])
# print("head of gene weights")
# print(head(gene.weights))
gene.weights.matrix <- as.matrix(gene.weights$weight)
rownames(gene.weights.matrix) <- gene.weights$ID_02
genotypes.file.matrix <- as.matrix(genotypes.file[,3:ncol(genotypes.file)])
rownames(genotypes.file.matrix) <- genotypes.file$IID
(any(is.element(rownames(gene.weights.matrix), colnames(genotypes.file.matrix))))
imputed.tx <- matrix(0, ncol = 1, nrow = nrow(genotypes.file.matrix))
rownames(imputed.tx) <- genotypes.file$IID
colnames(imputed.tx) <- gene
# save gene output
imputed.tx.fname <- paste0(tissue.output.dir, "/imputed_expression_per_gene/imputed-tx-of-", gene)
imputed.tissue.tx <- cbind(imputed.tissue.tx, imputed.tx)
View(imputed.tissue.tx)
View(tissue.rsid.info.filt)
library(tidyverse)
# step 1
tissue <- "Brain_Hypothalamus"
weights.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/tx-imputation/UTMOST-GTEx-model-weights/tmp/"
tissue.rsids <- read_lines(paste0(weights.dir, "rsid-ID02-for-", tissue), )
gc()
install.packages("ropenblas")
ropenblas::rcompiler()
library(rlang)
library(tidyverse)
setwd("/wdata/msmuhammad/projects/tx-imputation/")
tissue.rsid.info.filt.2 <- read.csv("UTMOST-GTEx-model-weights/tmp/rsid-for-Brain_Hypothalamus")
View(tissue.rsid.info.filt.2)
tissue.rsid.info.filt.2 <- read.table("UTMOST-GTEx-model-weights/tmp/rsid-for-Brain_Hypothalamus")
View(tissue.rsid.info.filt.2)
full.matrix <- matrix(nrow = length(unique(tissue.rsid.info.filt.2$ID_02)), ncol = length(unique(tissue.rsid.info.filt.2$gene)), data = 0)
df <- data.frame(row.names = unique(tissue.rsid.info.filt.2$ID_02))
df <- data.frame(matrix(NA, nrow = length(unique(tissue.rsid.info.filt.2$ID_02)), ncol = length(unique(tissue.rsid.info.filt.2$gene))))
rownames(df) <- unique(tissue.rsid.info.filt.2$ID_02)
df <- as.data.frame(matrix(NA, nrow = length(unique(tissue.rsid.info.filt.2$ID_02)), ncol = length(unique(tissue.rsid.info.filt.2$gene))))
source("/wdata/ebahl/gitlab/pipes/rnasa/R/rnasa_main.R")
source("/wdata/ebahl/gitlab/pipes/rnasa/R/module_reader.R")
source("/wdata/ebahl/gitlab/pipes/rnasa/R/rnasa_filter.R")
source("/wdata/ebahl/gitrepos/pipes/RNASA/R/modules/module_eda.R")
source("/wdata/ebahl/gitrepos/pipes/RNASA/R/modules/module_edger.R")
source("/wdata/ebahl/gitrepos/pipes/RNASA/R/modules/module_ruv.R")
#source("/wdata/ebahl/gitrepos/pipes/RNASA/R/modules/module_wgcna.R")
source("/wdata/ebahl/gitlab/pipes/rnasa/R/params_edger.R")
View(params.edger)
View(RNASA.ruvseq)
View(RNASA.edaseq)
rm(list = ls())
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
med <- "methylphenidate"
raw.glm.data <- read_rds("data/glm-predictions.rds")
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data.frame(dl = raw.DL.predictions[,med],
glm = raw.glm.data[,med]) %>%
ggplot(aes(x=dl, y=glm)) +
geom_smooth()
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
med <- "methylphenidate"
raw.glm.data <- read_rds("data/glm-predictions.rds")
annotations <- raw.glm.data[,1:(ncol(raw.glm.data)-14)]
raw.glm.data <- raw.glm.data[,(ncol(raw.glm.data)-13):ncol(raw.glm.data)]
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data <- cbind(raw.DL.predictions[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
glm.data <- cbind(raw.glm.data[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
sample <- sample(1:nrow(data), size = 200000)
plot_ly(data[sample,], x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.7, color = ~corr, size = 5) %>%
add_markers()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align='center')
rm(list = ls())
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
theme_set(theme_minimal())
formatted_tbl <- function(x) {
kableExtra::kable_styling(knitr::kable(x))
}
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
med <- "methylphenidate"
raw.glm.data <- read_rds("data/glm-predictions.rds")
annotations <- raw.glm.data[,1:(ncol(raw.glm.data)-14)]
raw.glm.data <- raw.glm.data[,(ncol(raw.glm.data)-13):ncol(raw.glm.data)]
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data <- cbind(raw.DL.predictions[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
sample <- sample(1:nrow(data), size = 200000)
plot_ly(data[sample,], x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.7, color = ~corr, size = 5) %>%
add_markers()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align='center')
rm(list = ls())
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
theme_set(theme_minimal())
formatted_tbl <- function(x) {
kableExtra::kable_styling(knitr::kable(x))
}
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
raw.glm.data <- read_rds("data/glm-predictions.rds")
med <- "methylphenidate"
med <- "methylphenidate"
library(plotly)
annotations <- raw.glm.data[,1:(ncol(raw.glm.data)-14)]
raw.glm.data <- raw.glm.data[,(ncol(raw.glm.data)-13):ncol(raw.glm.data)]
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data <- cbind(raw.DL.predictions[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
sample <- sample(1:nrow(data), size = 200000)
plot_ly(data[sample,], x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.7, color = ~corr, size = 5) %>%
add_markers()
install.packages("imager")
library(stringi)
library(stringr)
?stri_trans_general
install.packages("tm")
install.packages("hunspell")
raw <- read_csv("/wdata/atener/misc/ABCD_dems-from-parents_ Data-Dictionary.csv")
library(tidyverse)
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
raw <- read.csv("/wdata/atener/misc/ABCD_dems-from-parents_ Data-Dictionary.csv")
library(hunspell)
library(stringr)
# Function to remove non-English words from a string
remove_non_english <- function(text) {
# Tokenize the text into words
words <- str_extract_all(text, "\\b\\w+\\b", simplify = TRUE)[, 1]
# Filter English words using hunspell
english_words <- words[hunspell_check(words, dict = "en_US")]
# Collapse the English words into a string
paste(english_words, collapse = " ")
}
View(raw)
# make a copy of the dataframe
df <- raw
# Apply the function to the entire column
df$var_label <- sapply(df$var_label, remove_non_english)
View(df)
# Function to remove non-English words from a string
remove_non_english <- function(text) {
# Tokenize the text into words
words <- str_extract_all(text, "\\b\\w+\\b", simplify = TRUE)
# Filter English words using hunspell
english_words <- sapply(words, function(word_list) {
word_list[hunspell_check(word_list, dict = "en_US")]
})
# Collapse the English words into a string
sapply(english_words, function(english_list) {
paste(english_list, collapse = " ")
})
}
# make a copy of the dataframe
df <- raw
# Apply the function to the entire column
df$var_label <- sapply(df$var_label, remove_non_english)
# Function to remove non-English words from a string
remove_non_english <- function(text) {
# Tokenize the text into words
words <- str_extract_all(text, "\\b\\w+\\b", simplify = TRUE)
# Filter English words using hunspell
english_words <- sapply(words, function(word_list) {
word_list[hunspell_check(word_list, dict = "en_US")]
})
# Collapse the English words into a string
sapply(english_words, function(english_list) {
paste(english_list, collapse = " ")
}) %>%
# Combine the results into a single sentence
paste(collapse = " ")
}
# make a copy of the dataframe
df <- raw
# Apply the function to the entire column
df$var_label <- sapply(df$var_label, remove_non_english)
library(qdapRegex)
qdapRegex::rm_non_words(df$var_name[2])
qdapRegex::rm_non_words(df$var_label[2])
qdapRegex::rm_non_words(df$var_label[2], extract = T)
qdapRegex::ex_non_words(df$var_label[2])
df$notes <- sapply(df$notes, remove_non_english)
df$condition <- sapply(df$condition, remove_non_english)
df2 <- df %>%
dplyr::distinct(var_label)
View(df2)
df2 <- df %>%
dplyr::distinct(var_label, .keep_all = )
df2 <- df %>%
dplyr::distinct(var_label, .keep_all = T)
write.csv(df2, "/wdata/msmuhammad/scratch/abcd-dems-english.csv")
.libPaths()
.libPaths()
################################################################################
#                  correlation between guessings and other features            #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
setwd("/wdata/msmuhammad/projects/asd/PS-VC-disc")
################################################################################
#                               basic re-do analysis                           #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/asd/PS-VC-disc"
setwd(project.dir)
################################################################################
################################################################################
# read data
norm <- readxl::read_xlsx("data/raw/submission_1/tables/supplemental_tables_2e.xlsx",
sheet = 1, skip = 1)
################################################################################
# compare discrepency based on autism status
p1 <- norm %>%
select(asd, vc_index, processing_speed_index, fsiq_index) %>%
drop_na() %>%
mutate(VC_PS = vc_index - processing_speed_index) %>%
ggplot(aes(x=asd, y = VC_PS, fill = asd)) +
geom_violin(show.legend = F) + geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means(color = six.colors[4]) +
theme(axis.text.x = element_text(angle = 0)) +
scale_fill_manual(values = six.colors[c(3,1)]) +
labs(y = "VC index - PS index")
norm %>%
select(asd) %>%
ggplot(aes(x=asd)) +
geom_bar()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/asd/PS-VC-disc"
setwd(project.dir)
################################################################################
################################################################################
# read data
norm <- readxl::read_xlsx("data/raw/submission_1/tables/supplemental_tables_2e.xlsx",
sheet = 1, skip = 1)
